'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _app = require('firebase/app');

var _app2 = _interopRequireDefault(_app);

require('firebase/database');

var _shallowequal = require('shallowequal');

var _shallowequal2 = _interopRequireDefault(_shallowequal);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultMergeProps = function defaultMergeProps(ownProps, firebaseProps) {
  return _extends({}, ownProps, firebaseProps);
};

var mapSubscriptionsToQueries = function mapSubscriptionsToQueries(subscriptions) {
  return (0, _utils.mapValues)(subscriptions, function (value) {
    return typeof value === 'string' ? { path: value } : value;
  });
};

var defaultMapFirebaseToProps = function defaultMapFirebaseToProps(props, ref, firebaseApp) {
  return {
    firebaseApp: firebaseApp
  };
};

exports.default = function () {
  var mapFirebaseToProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultMapFirebaseToProps;
  var mergeProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMergeProps;

  var mapFirebase = function mapFirebase() {
    if (typeof mapFirebaseToProps !== 'function') {
      return mapFirebaseToProps;
    }

    var firebaseProps = mapFirebaseToProps.apply(undefined, arguments);

    if (firebaseProps === null || (typeof firebaseProps === 'undefined' ? 'undefined' : _typeof(firebaseProps)) !== 'object') {
      throw new Error('react-firebase: mapFirebaseToProps must return an object. Instead received ' + firebaseProps + '.');
    }

    return firebaseProps;
  };

  var computeSubscriptions = function computeSubscriptions(props, ref, firebaseApp) {
    var firebaseProps = mapFirebase(props, ref, firebaseApp);
    return (0, _utils.pickBy)(firebaseProps, function (prop) {
      return typeof prop === 'string' || prop && prop.path;
    });
  };

  return function (WrappedComponent) {
    var FirebaseConnect = function (_Component) {
      _inherits(FirebaseConnect, _Component);

      function FirebaseConnect(props, context) {
        _classCallCheck(this, FirebaseConnect);

        var _this = _possibleConstructorReturn(this, (FirebaseConnect.__proto__ || Object.getPrototypeOf(FirebaseConnect)).call(this, props, context));

        _this.firebaseApp = props.firebaseApp || context.firebaseApp || _app2.default.app();
        _this.ref = function (path) {
          return _this.firebaseApp.database().ref(path);
        };
        _this.state = {
          subscriptionsState: null
        };
        return _this;
      }

      _createClass(FirebaseConnect, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          var subscriptions = computeSubscriptions(this.props, this.ref, this.firebaseApp);

          this.mounted = true;
          this.subscribe(subscriptions);
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          var subscriptions = computeSubscriptions(this.props, this.ref, this.firebaseApp);
          var nextSubscriptions = computeSubscriptions(nextProps, this.ref, this.firebaseApp);
          var addedSubscriptions = (0, _utils.pickBy)(nextSubscriptions, function (path, key) {
            return !subscriptions[key];
          });
          var removedSubscriptions = (0, _utils.pickBy)(subscriptions, function (path, key) {
            return !nextSubscriptions[key];
          });
          var changedSubscriptions = (0, _utils.pickBy)(nextSubscriptions, function (path, key) {
            return subscriptions[key] && !(0, _shallowequal2.default)(subscriptions[key], path);
          });

          this.unsubscribe(_extends({}, removedSubscriptions, changedSubscriptions));
          this.subscribe(_extends({}, addedSubscriptions, changedSubscriptions));
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.mounted = false;

          if (this.listeners) {
            this.unsubscribe(this.listeners);
          }
        }
      }, {
        key: 'subscribe',
        value: function subscribe(subscriptions) {
          var _this2 = this;

          if (Object.keys(subscriptions).length < 1) {
            return;
          }

          var queries = mapSubscriptionsToQueries(subscriptions);
          var nextListeners = (0, _utils.mapValues)(queries, function (_ref, key) {
            var path = _ref.path,
                query = _objectWithoutProperties(_ref, ['path']);

            var containsOrderBy = Object.keys(query).some(function (queryKey) {
              return queryKey.startsWith('orderBy');
            });
            var subscriptionRef = (0, _utils.createQueryRef)(_this2.ref(path), query);
            var update = function update(snapshot) {
              if (_this2.mounted) {
                var value = containsOrderBy ? (0, _utils.mapSnapshotToValue)(snapshot) : snapshot.val();

                _this2.setState(function (prevState) {
                  return {
                    subscriptionsState: _extends({}, prevState.subscriptionsState, _defineProperty({}, key, value))
                  };
                });
              }
            };

            subscriptionRef.on('value', update);

            return {
              path: path,
              unsubscribe: function unsubscribe() {
                return subscriptionRef.off('value', update);
              }
            };
          });

          this.listeners = _extends({}, this.listeners, nextListeners);
        }
      }, {
        key: 'unsubscribe',
        value: function unsubscribe(subscriptions) {
          var _this3 = this;

          if (Object.keys(subscriptions).length < 1) {
            return;
          }

          var nextListeners = _extends({}, this.listeners);
          var nextSubscriptionsState = _extends({}, this.state.subscriptionsState);

          Object.keys(subscriptions).forEach(function (key) {
            var subscription = _this3.listeners[key];
            subscription.unsubscribe();

            delete nextListeners[key];
            delete nextSubscriptionsState[key];
          });

          this.listeners = nextListeners;
          this.setState({ subscriptionsState: nextSubscriptionsState });
        }
      }, {
        key: 'render',
        value: function render() {
          var firebaseProps = mapFirebase(this.props, this.ref, this.firebaseApp);
          var actionProps = (0, _utils.pickBy)(firebaseProps, function (prop) {
            return typeof prop === 'function';
          });
          var subscriptionProps = this.state.subscriptionsState;
          var props = mergeProps(this.props, _extends({}, actionProps, subscriptionProps));

          return (0, _react.createElement)(WrappedComponent, props);
        }
      }]);

      return FirebaseConnect;
    }(_react.Component);

    FirebaseConnect.WrappedComponent = WrappedComponent;
    FirebaseConnect.defaultProps = _react.Component.defaultProps;
    FirebaseConnect.displayName = 'FirebaseConnect(' + (0, _utils.getDisplayName)(WrappedComponent) + ')';
    FirebaseConnect.contextTypes = FirebaseConnect.propTypes = {
      firebaseApp: _propTypes2.default.shape({
        database: _propTypes2.default.func.isRequired // eslint-disable-line react/no-unused-prop-types
      })
    };

    return FirebaseConnect;
  };
};

module.exports = exports['default'];